第一行輸入每個 test case 的 最大張數 (max capacity) // s
第二行輸入每個 test case 具有的 郵資組數 // n

第一個 for 迴圈
對每一行 郵資組數
	第一個數為 此組郵資的個數 // num[]
	其後 分別為此組的各個郵資 // a[][]

	每輸入完一行 郵資組數
	即開始 計算 d[]  // d[i] 代表 郵資能組合成總郵資為 i 最少需要 d[i] 張郵票
	且每組郵資組數計算完後 存入 ans[]

第二個 for 迴圈
對每個 存入的 ans[] 做檢查
	將 ans[] 中最大的數 存入 best
	若 ans[] 有相同的最大值，則依序比較
		(1) 郵資組數的個數，個數小越佳
		(2) 最大郵資面額，具有較小的最大郵資面額越佳

最後 將答案依照格式化輸出 即可 // c++ 可選用 printf() 取代 cout std::setw()